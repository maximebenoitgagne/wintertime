#!/usr/bin/env python
import sys
import os
from scipy.io.netcdf import netcdf_file
import numpy as np
from darwin import iofmt
from subprocess import call

k = np.s_[:1]

args = sys.argv[1:]
exp, = args

names0 = np.genfromtxt('/home/jahn/darwin3/Darwin2/darwin2/verification/{}/names'.format(exp), object)
names = np.genfromtxt('{}/names'.format(exp), object)
namel0 = names0.tolist()
namel = names.tolist()

ii = []
ff = []
for name in namel:
    f = 1.
    if name in namel0:
        ii.append(namel0.index(name))
        ff.append(f)
        continue
#    if name[-1] == 'P':
#        name = name[:-1] + 'C'
#        f = 1./120.
    if name.startswith('c'):
        name = 'BIO_1_{:03d}'.format(int(name[1:]))
        if name in namel0:
            ii.append(namel0.index(name))
            ff.append(f)
            continue
    if name.startswith('n'):
        name = 'BIO_2_{:03d}'.format(int(name[1:]))
        if name in namel0:
            ii.append(namel0.index(name))
            ff.append(f)
            continue
    if name.startswith('fe'):
        name = 'BIO_3_{:03d}'.format(int(name[2:]))
        if name in namel0:
            ii.append(namel0.index(name))
            ff.append(f)
            continue
    if name.startswith('Chl'):
        name = 'BIO_4_{:03d}'.format(int(name[3:]))
        if name in namel0:
            ii.append(namel0.index(name))
            ff.append(f)
            continue
    if name.startswith('DO') and name[2] in 'CNF':
        name = 'OM_{:d}_1'.format('CNF'.index(name[2])+1)
        if name in namel0:
            ii.append(namel0.index(name))
            ff.append(f)
            continue
    if name.startswith('PO') and name[2] in 'CNF':
        name = 'OM_{:d}_2'.format('CNF'.index(name[2])+1)
        if name in namel0:
            ii.append(namel0.index(name))
            ff.append(f)
            continue
    ii.append(0)
    ff.append(0.)
    print name

i0s = ii
f0s = ff
n = len(namel)

for i,i0 in enumerate(i0s):
    call(['cp', '-p',
          '/home/jahn/darwin3/Darwin2/darwin2/verification/{}/run/var_trcstat_ptracer{:02d}_mean.txt'.format(exp, i0+1),
          '{}/results/var_trcstat_ptracer{:02d}_mean.txt'.format(exp, i+1),
         ])

